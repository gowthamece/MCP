@page "/mcpchat"
@using MCP_Balzor_AI_App.Services
@using Microsoft.AspNetCore.Components
@inject MCPClientService ChatService
@rendermode InteractiveServer

@* This page is for the MCPClient Chat Bot *@
<div class="chat-header">
    <h3>MCPClient Chat Bot</h3>
    <div class="chat-controls">
        <span class="message-count">Messages: @chatHistory.Count</span>
        <button class="clear-btn" @onclick="ClearConversation" disabled="@isLoading">Clear Chat</button>
    </div>
</div>
<div class="chat-container">
    <div class="chat-history">
        @foreach (var message in chatHistory)
        {
            <div class="@(message.IsUser ? "user-message" : "bot-message")">
                <div>
                    @if (message.IsUser)
                    {
                        @message.Text
                    }
                    else
                    {
                        @((MarkupString)message.Text)
                    }
                </div>
            </div>
        }
        @if (isLoading)
        {
            <div class="bot-message">
                <div>Thinking...</div>
            </div>
        }
    </div>
    <div class="chat-input">
        <input @bind="userInput" @oninput="OnInputChanged" @onkeydown="HandleKeyDown" placeholder="Type your message..." />
        <button @onclick="SendMessage" disabled="@isLoading">Send</button>
    </div>
    @if (isLoading)
    {
        <div style="text-align: center; margin-top: 0.5rem; color: #666;">
            <small>AI is thinking...</small>
        </div>
    }
</div>

@code {
    private string userInput = string.Empty;
    private bool isLoading = false;
    private List<ChatMessageModel> chatHistory = new();

    private async Task SendMessage()
    {
        var input = string.IsNullOrWhiteSpace(userInput) ? "Hello" : userInput;
        chatHistory.Add(new ChatMessageModel { Text = input, IsUser = true });
        userInput = string.Empty;
        isLoading = true;
        StateHasChanged();
        try
        {
            var response = await ChatService.GetChatCompletionAsync(input);
            chatHistory.Add(new ChatMessageModel { Text = response, IsUser = false });
        }
        catch (Exception ex)
        {
            chatHistory.Add(new ChatMessageModel { Text = $"Error: {ex.Message}", IsUser = false });
        }
        isLoading = false;
        StateHasChanged();
    }

    private void ClearConversation()
    {
        chatHistory.Clear();
        ChatService.ClearConversation();
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        userInput = e.Value?.ToString() ?? string.Empty;
    }

    public class ChatMessageModel
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }
}

<style>
.chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e0e0e0;
}

.chat-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.message-count {
    font-size: 0.9rem;
    color: #666;
}

.clear-btn {
    padding: 0.5rem 1rem;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
}

.clear-btn:hover {
    background-color: #c82333;
}

.clear-btn:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
}

.chat-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 1.5rem;
    border: 1px solid #ddd;
    border-radius: 12px;
    background: #fff;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.chat-history {
    min-height: 300px;
    max-height: 500px;
    overflow-y: auto;
    margin-bottom: 1rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
}

.user-message {
    text-align: right;
    margin-bottom: 1rem;
}

.user-message div {
    display: inline-block;
    background: #007bff;
    color: white;
    padding: 0.75rem 1rem;
    border-radius: 18px 18px 4px 18px;
    max-width: 70%;
    word-wrap: break-word;
}

.bot-message {
    text-align: left;
    margin-bottom: 1rem;
}

.bot-message div {
    display: inline-block;
    background: #e9ecef;
    color: #333;
    padding: 0.75rem 1rem;
    border-radius: 18px 18px 18px 4px;
    max-width: 70%;
    word-wrap: break-word;
}

.chat-input {
    display: flex;
    gap: 0.75rem;
    align-items: center;
}

.chat-input input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 2px solid #dee2e6;
    border-radius: 25px;
    font-size: 1rem;
    outline: none;
    transition: border-color 0.2s;
}

.chat-input input:focus {
    border-color: #007bff;
}

.chat-input button {
    padding: 0.75rem 1.5rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 25px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    transition: background-color 0.2s;
}

.chat-input button:hover:not(:disabled) {
    background-color: #0056b3;
}

.chat-input button:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
}

/* Table styling for user profile data */
.bot-message table {
    width: 100%;
    border-collapse: collapse;
    margin: 10px 0;
    font-size: 0.9rem;
}

.bot-message table th,
.bot-message table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.bot-message table th {
    background-color: #f2f2f2;
    font-weight: bold;
}

.bot-message table tr:nth-child(even) {
    background-color: #f9f9f9;
}

.bot-message pre {
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 4px;
    padding: 10px;
    overflow-x: auto;
    font-family: 'Courier New', monospace;
    font-size: 0.85rem;
    white-space: pre-wrap;
}
</style>
